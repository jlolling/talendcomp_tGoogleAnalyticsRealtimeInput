<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode) codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String applicationName = ElementParameterParser.getValue(node, "__APPLICATION_NAME__");
    boolean useServiceAccount = "SERVICE_ACCOUNT".equals(ElementParameterParser.getValue(node, "__AUTHENTICATION_METHOD__"));
	String accountEmail = ElementParameterParser.getValue(node, "__SERVICE_ACCOUNT_EMAIL__");
	String keyFile = ElementParameterParser.getValue(node, "__KEY_FILE__");
    String clientSecretFile = ElementParameterParser.getValue(node, "__CLIENT_SECRET_FILE__");
    String userEmail = ElementParameterParser.getValue(node, "__USER_ACCOUNT_EMAIL__");
    String profileId = ElementParameterParser.getValue(node, "__PROFILE_ID__");
	String dimensions = ElementParameterParser.getValue(node, "__DIMENSIONS__");
	String metrics = ElementParameterParser.getValue(node, "__METRICS__");
	String filters = ElementParameterParser.getValue(node, "__FILTERS__");
	String sorts = ElementParameterParser.getValue(node, "__SORTS__");
	String timeout = ElementParameterParser.getValue(node, "__TIMEOUT_IN_SEC__");
	String timeOffset = ElementParameterParser.getValue(node, "__TIME_OFFSET__");
	String fetchSize = ElementParameterParser.getValue(node, "__FETCH_SIZE__");
	String maxAttempts = ElementParameterParser.getValue(node, "__MAX_ATTEMPTS__");
	String numberFormatLocale = ElementParameterParser.getValue(node, "__NUMBERFORMAT_LOCALE__");
	if (numberFormatLocale != null && numberFormatLocale.isEmpty() == false) {
		numberFormatLocale = "\"" + numberFormatLocale + "\"";
	} else {
		numberFormatLocale = "null";
	}
    boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
	boolean deliverTotalsDataset = "true".equals(ElementParameterParser.getValue(node, "__DELIVER_TOTALS_DATASET__"));
	String keepClient = ElementParameterParser.getValue(node, "__KEEP_CLIENT__");
	String keepClientName = ElementParameterParser.getValue(node, "__KEEP_CLIENT_KEY__");
	keepClientName = keepClientName != null && keepClientName.isEmpty() == false ? keepClientName : "\"\"";
    List<IMetadataColumn> listColumns = null;
    IConnection conn = null;
    IConnection connDimensions = null;
    IConnection connMetrics = null;
	boolean normalizedFlows = "true".equals(ElementParameterParser.getValue(node, "__NORMALIZED_OUTPUT__"));
    if (node.getOutgoingConnections() != null && node.getOutgoingConnections().size() > 0) {
    	if (normalizedFlows) {
		    List<? extends IConnection> connsDimensions = node.getOutgoingConnections("DIMENSION_VALUES");
		    if (connsDimensions != null && connsDimensions.size() > 0) {
		    	connDimensions = connsDimensions.get(0);
		    }
		    List<? extends IConnection> connsMetrics = node.getOutgoingConnections("METRIC_VALUES");
		    if (connsMetrics != null && connsMetrics.size() > 0) {
		    	connMetrics = connsMetrics.get(0);
		    }
    	} else {
		    List<? extends IConnection> connsPlain = node.getOutgoingConnections();
		    if (connsPlain != null && connsPlain.size() > 0) {
		    	conn = connsPlain.get(0);
		        IMetadataTable metadata = conn.getMetadataTable();
		        listColumns = metadata.getListColumns();
		    }
    	}
    }
    boolean debug = "true".equals(ElementParameterParser.getValue(node, "__DEBUG__"));
%>
    // start creating client
<% if ("true".equals(keepClient)) {%>
	de.jlo.talendcomp.google.analytics.realtime.GoogleAnalyticsRealtimeInput <%=cid%> = de.jlo.talendcomp.google.analytics.realtime.GoogleAnalyticsRealtimeInput.getFromCache(<%=accountEmail%> + <%=keepClientName%> + "<%=cid%>" + jobName);
	if (<%=cid%> == null) {
		<%=cid%> = new de.jlo.talendcomp.google.analytics.realtime.GoogleAnalyticsRealtimeInput();
<% } else {%>
	de.jlo.talendcomp.google.analytics.realtime.GoogleAnalyticsRealtimeInput <%=cid%> = new de.jlo.talendcomp.google.analytics.realtime.GoogleAnalyticsRealtimeInput();
<% }%>
   <%=cid%>.setDebug(<%=debug%>);
<% if (applicationName != null && applicationName.trim().isEmpty() == false) {%>
		<%=cid%>.setApplicationName(<%=applicationName%>);
<% }%>
    <%=cid%>.setUseServiceAccount(<%=useServiceAccount%>);
<%  if (useServiceAccount) { %>
        // setup credentials with service account
		<%=cid%>.setAccountEmail(<%=accountEmail%>);
		<%=cid%>.setKeyFile(<%=keyFile%>);
<% } else { %>
      // setup with Client ID for native application
		<%=cid%>.setAccountEmail(<%=userEmail%>);
		<%=cid%>.setClientSecretFile(<%=clientSecretFile%>);
<% } %> 
<% if (timeout != null && timeout.trim().isEmpty() == false) {%>
		<%=cid%>.setTimeoutInSeconds(<%=timeout%>);
<% }%>
<% if (timeOffset != null && timeOffset.trim().isEmpty() == false) {%>
		<%=cid%>.setTimeOffsetMillisToPast(<%=timeOffset%>);
<% }%>
<% if (fetchSize != null && fetchSize.trim().isEmpty() == false) {%>
		<%=cid%>.setFetchSize(<%=fetchSize%>);
<% }%>
        <%=cid%>.deliverTotalsDataset(<%=deliverTotalsDataset%>);
		try {
		    // initialize client with private key
			<%=cid%>.initializeAnalyticsClient();
		} catch (Exception e) {
			globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
<% if (dieOnError) { %>
			throw e;
<% } else { %>
			e.printStackTrace();
<% } %>	
			}
		globalMap.put("<%=cid%>", <%=cid%>);
<% if ("true".equals(keepClient)) {%>
		de.jlo.talendcomp.google.analytics.realtime.GoogleAnalyticsRealtimeInput.putIntoCache(<%=accountEmail%> + <%=keepClientName%> + "<%=cid%>" + jobName, <%=cid%>);
	}
<% }%>
    globalMap.put("<%=cid%>_ERROR_CODE", 0);
	// setup query
	<%=cid%>.setProfileId(<%=profileId%>);
<% if (dimensions != null && dimensions.trim().isEmpty() == false) {%>
	<%=cid%>.setDimensions(<%=dimensions%>);
<% }%>
	<%=cid%>.setMetrics(<%=metrics%>);
<% if (filters != null && filters.trim().isEmpty() == false) {%>
	<%=cid%>.setFilters(<%=filters%>);
<% }%>
<% if (sorts != null && sorts.trim().isEmpty() == false) {%>
	<%=cid%>.setSorts(<%=sorts%>);
<% }%>
<% if (maxAttempts != null && maxAttempts.trim().isEmpty() == false) { %>
	<%=cid%>.setMaxRetriesInCaseOfErrors(<%=maxAttempts%>);
<% } %>
	// fire query and fetch data
	try {
	    // checks also the correctness of result columns
		<%=cid%>.executeQuery();
		globalMap.put("<%=cid%>_REQUEST_TIMESTAMP", <%=cid%>.getLastRequestTimestamp());
	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
		globalMap.put("<%=cid%>_ERROR_CODE", <%=cid%>.getErrorCode());
<% if (dieOnError) { %>
		throw e;
<% } else { %>
		e.printStackTrace();
<% } %>	
	}
	// iterate through the data...
<% if (normalizedFlows) { %>
	// deliver the output in 2 normalized flows for dimensions and metrics
	int countDimensionValues_<%=cid%> = 0;
	int countMetricValues_<%=cid%> = 0;
	while (true) {
		try {
			// next calls the necessary calls to hasNextPlainRecord()
			if (<%=cid%>.nextNormalizedRecord() == false) {
				break;
			}
		} catch (Exception e) {
          globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
          globalMap.put("<%=cid%>_ERROR_CODE", <%=cid%>.getErrorCode());
<% if (dieOnError) { %>
			throw e;
<% } else { %>
			break;
<% } %>	
	    }
<%	 if (connDimensions != null) { %> 
		de.jlo.talendcomp.google.analytics.realtime.DimensionValue dv = <%=cid%>.getCurrentDimensionValue();
		if (dv != null) {
		    globalMap.put("<%=cid%>_MINUTES_AGO_AS_ABSOLUTE_DATE", <%=cid%>.getMinutesAgoAsAbsoluteDate());
			<%=connDimensions.getName()%> = new <%=connDimensions.getName()%>Struct();
			<%=connDimensions.getName()%>.ROW_NUM = dv.rowNum;
			<%=connDimensions.getName()%>.DIMENSION_NAME = dv.name;
			<%=connDimensions.getName()%>.DIMENSION_VALUE = dv.value;
			countDimensionValues_<%=cid%>++;
		} else {
			<%=connDimensions.getName()%> = null;
		}
<%   } %>
<%   if (connMetrics != null) { %>
		de.jlo.talendcomp.google.analytics.realtime.MetricValue mv = <%=cid%>.getCurrentMetricValue();
		if (mv != null) {
		    <%=connMetrics.getName()%> = new <%=connMetrics.getName()%>Struct();
			<%=connMetrics.getName()%>.ROW_NUM = mv.rowNum;
			<%=connMetrics.getName()%>.METRIC_NAME = mv.name;
			<%=connMetrics.getName()%>.METRIC_VALUE = mv.value;
			countMetricValues_<%=cid%>++;
		} else {
			<%=connMetrics.getName()%> = null;
		}
<%   } %>
<% } else { %>	
	int countLines_<%=cid%> = 0;
	// deliver the output as plain flow
	// with dimension and metrics as columns
	boolean warningAboutSchemaMismatchDone = false;
	while (true) {
	    try {
		    // hasNextPlainRecord() executes a new query if needed
		    if (<%=cid%>.hasNextPlainRecord() == false) {
		    	break;
		    }
	    } catch (Exception e) {
         globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
         globalMap.put("<%=cid%>_ERROR_CODE", <%=cid%>.getErrorCode());
<% if (dieOnError) { %>
			throw e;
<% } else { %>
			break;
<% } %>	
	    }
	    // next row from results
		java.util.List<String> dataset_<%=cid%> = <%=cid%>.getNextPlainRecord();
	    globalMap.put("<%=cid%>_MINUTES_AGO_AS_ABSOLUTE_DATE", <%=cid%>.getMinutesAgoAsAbsoluteDate());
	   countLines_<%=cid%>++;
<%  if (conn != null) { %>
		// create a new row, thats avoid the need of setting attributes to null
		<%=conn.getName()%> = new <%=conn.getName()%>Struct();
<%  } %>
<%	int index = 0;
    if (listColumns != null && conn != null) {
        for (IMetadataColumn col : listColumns) {
            String javaClassName = JavaTypesManager.getJavaTypeFromId(col.getTalendType()).getNullableClass().getName(); %>
		// fill schema field <%=col.getLabel()%>
		if (dataset_<%=cid%>.size() > <%=index%>) {
			String <%=cid%>_value_<%=index%> = dataset_<%=cid%>.get(<%=index%>);
			if (<%=cid%>_value_<%=index%> != null) {
<%          if (deliverTotalsDataset) {
		        if ("java.util.Date".equals(javaClassName)) { %>
				if (countLines_<%=cid%> == 0) {
				    // we cannot set a date value for the totals row
					<%=conn.getName()%>.<%=col.getLabel()%> = null;
				} else {
<%              if ("java.lang.String".equals(javaClassName)) { %>
					<%=conn.getName()%>.<%=col.getLabel()%> = <%=cid%>_value_<%=index%>;
<%              } else { %>
	    	        try {
						<%=conn.getName()%>.<%=col.getLabel()%> = (<%=javaClassName%>) de.jlo.talendcomp.google.analytics.realtime.Util.convertToDatatype(
								<%=cid%>_value_<%=index%>, 
								"<%=col.getTalendType().substring(3)%>", 
								<%=((col.getPattern() != null && col.getPattern().isEmpty() == false) ? col.getPattern() : numberFormatLocale)%>);
					} catch (Exception e) {
						throw new Exception("Convert field: <%=conn.getName()%>.<%=col.getLabel()%> value=[" + <%=cid%>_value_<%=index%> + "] countLines=" + countLines_<%=cid%> + " failed:" + e.getMessage(), e);		
					}
<%              } %>                
				}
<%              } else {
                    if ("java.lang.String".equals(javaClassName)) { %>
				<%=conn.getName()%>.<%=col.getLabel()%> = <%=cid%>_value_<%=index%>;
<%                  } else { %>
    	        try {
					<%=conn.getName()%>.<%=col.getLabel()%> = (<%=javaClassName%>) de.jlo.talendcomp.google.analytics.realtime.Util.convertToDatatype(
							<%=cid%>_value_<%=index%>, 
							"<%=col.getTalendType().substring(3)%>", 
							<%=((col.getPattern() != null && col.getPattern().isEmpty() == false) ? col.getPattern() : numberFormatLocale)%>);
				} catch (Exception e) {
					throw new Exception("Convert field: <%=conn.getName()%>.<%=col.getLabel()%> value=[" + <%=cid%>_value_<%=index%> + "] countLines=" + countLines_<%=cid%> + " failed:" + e.getMessage(), e);		
				}
<%                  } %>                
<%              } %>
<%          } else {
                if ("java.lang.String".equals(javaClassName)) { %>
				<%=conn.getName()%>.<%=col.getLabel()%> = <%=cid%>_value_<%=index%>;
<%              } else { %>
    	        try {
					<%=conn.getName()%>.<%=col.getLabel()%> = (<%=javaClassName%>) de.jlo.talendcomp.google.analytics.realtime.Util.convertToDatatype(
							<%=cid%>_value_<%=index%>, 
							"<%=col.getTalendType().substring(3)%>", 
							<%=((col.getPattern() != null && col.getPattern().isEmpty() == false) ? col.getPattern() : numberFormatLocale)%>);
				} catch (Exception e) {
					throw new Exception("Convert field: <%=conn.getName()%>.<%=col.getLabel()%> value=[" + <%=cid%>_value_<%=index%> + "] countLines=" + countLines_<%=cid%> + " failed:" + e.getMessage(), e);		
				}
<%              } %>                
<%          } %>
			}
		} else if (warningAboutSchemaMismatchDone == false) {
			warningAboutSchemaMismatchDone = true;
			System.err.println("Warning, the schema contains more columns than the ga result provides (current index=<%=index%>). Please check this!");
		}
<%      index++;%>
<%      } %>
<%  } %>
<%  } // if (normalizedFlows... %>
